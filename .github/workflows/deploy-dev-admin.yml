name: Build and Deploy Admin Server to Raspberry Pi (develop)

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  # Job 1: Admin 서버 변경 감지 및 배포 필요 여부 결정
  check-admin-changes:
    name: Check for Admin Service Changes
    runs-on: ubuntu-latest
    outputs:
      # 이 워크플로우를 계속 실행해야 하는지 (true/false)
      should_run: ${{ steps.filter.outputs.any_modified }}
      # 배포까지 필요한 변경인지 (true/false)
      should_deploy: ${{ steps.deployment-gate.outputs.any_modified }}
      # 데이터베이스 다운이 필요한 변경인지 (true/false)
      should_db_down: ${{ steps.db-check.outputs.any_modified }}
      # 모니터링 스택 변경 여부 (true/false)
      mon_changed: ${{ steps.mon-changes.outputs.any_modified }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 1: Admin 서버와 관련된 변경이 있었는지 확인 (github action 테스트 유발 여부)
      - name: Check for Admin Service Changes
        id: filter
        uses: tj-actions/changed-files@v44
        with:
          # 오직 이 파일들만 변경 감지
          files: |
            apps/admin-server/**
            libs/**
            scripts/apps/admin-server/**
            scripts/dev-infra/**
            scripts/rdb/**
            prisma/**
            package.json
            package-lock.json
            tsconfig.build.json
            tsconfig.json
          files_ignore: |
            **/*.md

      # Step 2: 배포가 필요한 변경인지 확인 (Whitelist 방식)
      - name: Check for deployable changes
        id: deployment-gate
        uses: tj-actions/changed-files@v44
        with:
          # 오직 이 파일들만 배포를 유발할 수 있음
          files: |
            .github/workflows/deploy-dev-admin.yml
            apps/admin-server/src/**
            libs/common/**
            libs/core/**
            prisma/**
            scripts/dev-infra/**
            scripts/rdb/**
            package.json
            package-lock.json
          files_ignore: |
            **/*.md

      # Step 3: 데이터베이스 관련 변경 감지
      - name: Check for database
        id: db-check
        uses: tj-actions/changed-files@v44
        with:
          files: |
            scripts/dev-infra/**
            **/*.sql
            **/docker-compose.yml
            prisma/**

      - name: echo outputs for debugging
        run: |
          echo "should_run=${{ steps.filter.outputs.any_modified }}"
          echo "should_deploy=${{ steps.deployment-gate.outputs.any_modified }}"
          echo "filter_outputs=${{ toJSON(steps.filter.outputs) }}"
          echo "Deployment gate outputs: ${{ toJSON(steps.deployment-gate.outputs) }}"
          echo "Database check outputs: ${{ toJSON(steps.db-check.outputs) }}"

      # Step 4: 모니터링 스택 변경 감지
      - name: Check for monitoring changes
        id: mon-changes
        uses: tj-actions/changed-files@v44
        with:
          files: |
            scripts/monitoring/**

  # Job 2: Admin 서버 빌드 및 테스트
  test-admin:
    name: Test Admin Server
    needs: check-admin-changes
    if: needs.check-admin-changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install dependencies
        run: npm ci

      # PR 시 Admin 서버 테스트 실행
      - name: Run E2E tests for Admin Server
        if: github.event_name == 'pull_request'
        run: |
          npm run admin-server:test:infra:up
          npm run admin-server:test:e2e
          npm run admin-server:test:infra:down

  build-admin:
    name: Build Admin Server
    needs: check-admin-changes
    if: github.event_name == 'push' && needs.check-admin-changes.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install dependencies
        run: npm ci

      # push 시 Admin 서버 빌드 실행 (배포가 필요한 경우에만)
      - name: Build Admin Server for production
        run: |
          npx prisma generate
          npm run build admin-server
          npm run build:seed

      # push 시 아티팩트 업로드 (배포가 필요한 경우에만)
      - name: Upload Admin Server artifact
        uses: actions/upload-artifact@v4
        with:
          name: admin-server-build
          path: |
            dist/apps/admin-server
            dist/scripts/dev-infra/seed
            scripts/dev-infra/init
            scripts/dev-infra/docker-compose.yml
            scripts/rdb
            prisma
            package.json
            package-lock.json

  # Job 3: Admin 서버 배포
  deploy-admin:
    # 라즈베리파이 배포 시 동시 실행 방지
    concurrency:
      group: raspberry-pi-deploy
      cancel-in-progress: false
    name: Deploy Admin Server to Raspberry Pi
    needs: [check-admin-changes, build-admin]
    if: github.event_name == 'push' && (needs.check-admin-changes.outputs.should_deploy == 'true' || needs.check-admin-changes.outputs.mon_changed == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Download admin artifact
        uses: actions/download-artifact@v4
        with:
          name: admin-server-build
          path: ./deploy-admin-files

      - name: Compress deployment files
        run: |
          tar -czf deploy-admin.tar.gz -C ./deploy-admin-files .

      - name: Deploy to Raspberry Pi
        env:
          HOST: ${{ secrets.RASPBERRY_PI_HOST }}
          USER: ${{ secrets.RASPBERRY_PI_USER }}
          PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
          PORT: ${{ secrets.RASPBERRY_PI_PORT }}
          DB_DOWN: ${{ needs.check-admin-changes.outputs.should_db_down }}
        run: |
          echo "[deploy] should_db_down=$DB_DOWN"
          sudo apt-get update && sudo apt-get install -y sshpass
          sshpass -p "$PASSWORD" scp -P "$PORT" -o StrictHostKeyChecking=no deploy-admin.tar.gz $USER@$HOST:~/inhu-backend/
          sshpass -p "$PASSWORD" ssh -p "$PORT" -o StrictHostKeyChecking=no $USER@$HOST "bash -s" << 'EOF'
            set -e
            DB_DOWN_FLAG='${DB_DOWN}'
            cd ~/inhu-backend
            tar -xzf deploy-admin.tar.gz
            rm deploy-admin.tar.gz
            npm ci
            if [ "$DB_DOWN_FLAG" = "true" ]; then
              pm2 stop inhu-backend-admin-dev
              pm2 stop inhu-backend-user-dev
              npm run dev-infra:down
              npm run dev-infra:up
              until docker exec inhu-dev-postgres psql -U inhu_admin -d inhu -c "SELECT 1;" >/dev/null 2>&1; do sleep 1; done
              pm2 reload inhu-backend-admin-dev
              pm2 reload inhu-backend-user-dev
              npm run seed
            else
              pm2 reload inhu-backend-admin-dev
            fi
          EOF
      # 모니터링 번들 패키징 (scripts/monitoring/** 변경시에만)
      - name: Package monitoring bundle
        if: needs.check-admin-changes.outputs.mon_changed == 'true'
        run: tar -czf monitoring.tar.gz -C scripts/monitoring docker-compose.dev.yml grafana prometheus

      # 라즈베리(DEV)로 배포
      - name: Deploy monitoring to Raspberry Pi
        if: needs.check-admin-changes.outputs.mon_changed == 'true'
        env:
          HOST: ${{ secrets.RASPBERRY_PI_HOST }}
          USER: ${{ secrets.RASPBERRY_PI_USER }}
          PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
          PORT: ${{ secrets.RASPBERRY_PI_PORT }}
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          sshpass -p "$PASSWORD" ssh -p "$PORT" -o StrictHostKeyChecking=no $USER@$HOST "mkdir -p ~/inhu-monitoring"
          sshpass -p "$PASSWORD" scp -P "$PORT" -o StrictHostKeyChecking=no monitoring.tar.gz $USER@$HOST:~/inhu-monitoring/
          sshpass -p "$PASSWORD" ssh -p "$PORT" -o StrictHostKeyChecking=no $USER@$HOST "bash -s" << 'EOF'
            set -e
            cd ~/inhu-monitoring
            tar -xzf monitoring.tar.gz && rm monitoring.tar.gz
            docker compose -f docker-compose.dev.yml --env-file $HOME/inhu-backend/.env.admin up -d --pull always --remove-orphans --project-name inhu-monitoring
          EOF
