name: Build and Deploy Admin Server to EC2 (master)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Job 1: Admin 서버 변경 감지 및 배포 필요 여부 결정
  check-admin-changes:
    name: Check for Admin Service Changes
    runs-on: ubuntu-latest
    outputs:
      # 이 워크플로우를 계속 실행해야 하는지 (true/false)
      should_run: ${{ steps.filter.outputs.admin-server }}
      # 배포까지 필요한 변경인지 (true/false)
      should_deploy: ${{ steps.deployment-gate.outputs.any_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 1: Admin 서버와 관련된 변경이 있었는지 확인
      - name: Detect affected services
        uses: dorny/paths-filter@v3
        id: filter
        with:
          # 오직 admin-server 필터 하나만 정의합니다.
          filters: |
            admin-server:
              - 'apps/admin-server/**'
              - 'libs/**'
              - 'scripts/apps/admin-server/**'
              - 'scripts/dev-infra/**'
              - 'scripts/rdb/**'
              - 'prisma/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.build.json'
              - 'tsconfig.json'

      # Step 2: 배포가 필요한 변경인지 확인 (Whitelist 방식)
      - name: Check for deployable changes
        id: deployment-gate
        uses: tj-actions/changed-files@v44
        with:
          # 오직 이 파일들만 배포를 유발할 수 있음
          files: |
            .github/workflows/deploy-dev-admin.yml
            apps/admin-server/src/**
            libs/{common, core}/**
            prisma/**
            scripts/dev-infra/**
            scripts/rdb/**
            package.json
            package-lock.json

  # Job 2: Admin 서버 빌드 및 테스트
  build-and-test-admin:
    name: Build & Test Admin Server
    needs: check-admin-changes
    if: needs.check-admin-changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install dependencies
        run: npm ci

      # PR 시 Admin 서버 테스트 실행
      - name: Run E2E tests for Admin Server
        if: github.event_name == 'pull_request'
        run: |
          npm run admin-server:test:infra:up
          npm run admin-server:test:e2e
          npm run admin-server:test:infra:down

      # push 시 Admin 서버 빌드 실행 (배포가 필요한 경우에만)
      - name: Build Admin Server for production
        if: github.event_name == 'push' && needs.check-admin-changes.outputs.should_deploy == 'true'
        run: |
          npx prisma generate
          npm run build admin-server

      # push 시 아티팩트 업로드 (배포가 필요한 경우에만)
      - name: Upload Admin Server artifact
        if: github.event_name == 'push' && needs.check-admin-changes.outputs.should_deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: admin-server-build
          path: |
            dist/apps/admin-server
            scripts/dev-infra
            scripts/rdb
            prisma
            package.json
            package-lock.json

  # Job 3: Admin 서버 배포
  deploy-admin:
    # EC2 배포 시 동시 실행 방지
    concurrency:
      group: ec2-deploy
      cancel-in-progress: false
    name: Deploy Admin Server to EC2
    needs: [check-admin-changes, build-and-test-admin]
    if: github.event_name == 'push' && needs.check-admin-changes.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download admin artifact
        uses: actions/download-artifact@v4
        with:
          name: admin-server-build
          path: ./deploy-admin-files

      - name: Compress deployment files
        run: |
          tar -czf deploy-admin.tar.gz -C ./deploy-admin-files .

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          KEY: ${{ secrets.EC2_KEY }}
          USER: ubuntu
        run: |
          echo "$KEY" > key.pem
          chmod 400 key.pem
          scp -o StrictHostKeyChecking=no -i key.pem deploy-admin.tar.gz $USER@$HOST:~/inhu-backend/
          ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST << 'EOF'
            cd ~/inhu-backend
            tar -xzf deploy-admin.tar.gz
            rm deploy-admin.tar.gz
            npm ci
            npm run dev-infra:down
            npm run dev-infra:up
            pm2 reload inhu-backend-admin-dev
          EOF
