name: Build and Deploy User Server to EC2 (master)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Job 1: User 서버 변경 감지 및 배포 필요 여부 결정
  check-user-changes:
    name: Check for User Service Changes
    runs-on: ubuntu-latest
    outputs:
      # 이 워크플로우를 계속 실행해야 하는지 (true/false)
      should_run: ${{ steps.filter.outputs.any_modified }}
      # 배포까지 필요한 변경인지 (true/false)
      should_deploy: ${{ steps.deployment-gate.outputs.any_modified }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 1: User 서버와 관련된 변경이 있었는지 확인 (github action 테스트 유발 여부)
      - name: Check for User Service Changes
        id: filter
        uses: tj-actions/changed-files@v44
        with:
          # 오직 이 파일들만 변경 감지
          files: |
            apps/user-server/**
            libs/**
            prisma/**
            package.json
            package-lock.json
            tsconfig.build.json
            tsconfig.json
          files_ignore: |
            **/*.md

      # Step 2: 배포가 필요한 변경인지 확인 (Whitelist 방식)
      - name: Check for deployable changes
        id: deployment-gate
        uses: tj-actions/changed-files@v44
        with:
          # 오직 이 파일들만 배포를 유발할 수 있음
          files: |
            .github/workflows/deploy-prod-user.yml
            apps/user-server/src/**
            libs/common/**
            libs/core/**
            prisma/**
            package.json
            package-lock.json
          files_ignore: |
            **/*.md

      - name: echo outputs for debugging
        run: |
          echo "should_run=${{ steps.filter.outputs.any_modified }}"
          echo "should_deploy=${{ steps.deployment-gate.outputs.any_modified }}"
          echo "filter_outputs=${{ toJSON(steps.filter.outputs) }}"
          echo "Deployment gate outputs: ${{ toJSON(steps.deployment-gate.outputs) }}"

  # Job 2: User 서버 빌드 및 테스트
  test-user:
    name: Test User Server
    needs: check-user-changes
    if: needs.check-user-changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install dependencies
        run: npm ci

      # PR 시 User 서버 테스트 실행
      - name: Run E2E tests for User Server
        if: github.event_name == 'pull_request'
        run: |
          npm run user-server:test:infra:up
          npm run user-server:test:e2e
          npm run user-server:test:infra:down

  build-user:
    name: Build User Server
    needs: check-user-changes
    if: github.event_name == 'push' && needs.check-user-changes.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install dependencies
        run: npm ci

      # push 시 User 서버 빌드 실행 (배포가 필요한 경우에만)
      - name: Build User Server for production
        run: |
          npx prisma generate
          npm run build user-server

      # push 시 아티팩트 업로드 (배포가 필요한 경우에만)
      - name: Upload User Server artifact
        uses: actions/upload-artifact@v4
        with:
          name: user-server-build
          path: |
            dist/apps/user-server
            prisma
            package.json
            package-lock.json

  # Job 3: User 서버 배포
  deploy-user:
    # EC2 배포 시 동시 실행 방지
    concurrency:
      group: ec2-deploy
      cancel-in-progress: false
    name: Deploy User Server to EC2
    needs: [check-user-changes, build-user]
    if: github.event_name == 'push' && needs.check-user-changes.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download user artifact
        uses: actions/download-artifact@v4
        with:
          name: user-server-build
          path: ./deploy-user-files

      - name: Compress deployment files
        run: |
          tar -czf deploy-user.tar.gz -C ./deploy-user-files .

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          KEY: ${{ secrets.EC2_KEY }}
          USER: ubuntu
        run: |
          echo "$KEY" > key.pem
          chmod 400 key.pem
          scp -o StrictHostKeyChecking=no -i key.pem deploy-user.tar.gz $USER@$HOST:~/inhu-backend/
          ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST << 'EOF'
            cd ~/inhu-backend
            tar -xzf deploy-user.tar.gz
            rm deploy-user.tar.gz
            npm ci
            pm2 restart inhu-backend-user
          EOF
